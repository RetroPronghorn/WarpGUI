use glob::glob;

use std::{
    error::Error,
    fs::{self, File},
    io::Write,
};

use rsass::{compile_scss, output};

fn main() -> Result<(), Box<dyn Error>> {
    let scss_output = "./src/.styles.css";
    let scss = File::create(scss_output);

    let mut contents =
        String::from("/* This file is automatically generated, edits will be overwritten. */\n");

    for entry in glob("src/**/*.scss").expect("Failed to read glob pattern") {
        match entry {
            Ok(path) => {
                println!("Adding SCSS :{}", path.display());
                let file = fs::read_to_string(path);
                match file {
                    Ok(s) => {
                        contents += s.as_ref();
                    }
                    Err(_) => {}
                }
            }
            Err(_) => {}
        }
    }

    let format = output::Format {
        style: output::Style::Compressed,
        ..Default::default()
    };

    let css = compile_scss(contents.as_bytes(), format);

    match css {
        Ok(c) => match scss {
            Ok(mut s) => {
                let written = s.write_all(&c);
                match written {
                    Ok(_) => {}
                    Err(_) => {}
                }
            }
            Err(_) => {}
        },
        Err(_) => {}
    }

    Ok(())
}
