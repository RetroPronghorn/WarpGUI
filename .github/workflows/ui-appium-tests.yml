name: UI Automated Tests on MacOS

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout working directory üîñ
        uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      #- name: Update Homebrew
      #  run: |
      #    brew update --preinstall
      #    cat "$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/protobuf.rb" > .github/brew-formulae

      #- name: Configure Homebrew cache
      #  uses: actions/cache@v3
      #  with:
      #    path: |
      #      ~/Library/Caches/Homebrew/protobuf--*
      #      ~/Library/Caches/Homebrew/downloads/*--protobuf-*
      #    key: brew-${{ hashFiles('.github/brew-formulae') }}
      #    restore-keys: brew-

      #- name: Install Homebrew dependencies
      #  run: |
      #    env HOMEBREW_NO_AUTO_UPDATE=1 brew install protobuf

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Install Protobuf
        continue-on-error: true
        run: |
          brew update
          brew install protobuf

      - name: Build the app
        run: |
          cargo build --release

      - name: Archive the app
        uses: actions/upload-artifact@v1
        with:
          name: app-macos
          path: target/release

  test:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout working directory üîñ
        uses: actions/checkout@v3

      - name: Download the app üó≥Ô∏è
        uses: actions/download-artifact@v1
        with:
          name: app-macos
          path: appium-tests/apps

      - name: Copy DMG to Appium Apps Directory
        working-directory: appium-tests/apps
        run: |
          unzip "Uplink Universal Mac App.zip"
          unzip Uplink-Mac-Universal.zip
          cp -r ./Uplink.app /Applications/

      - name: Setup Node.js üî®
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install NPM dependencies üì¶
        run: |
          cd appium-tests && npm install

      #- name: Install Uplink Desktop App
      #  run: |
      #    cd ./appium-tests/apps
      #    ls -la
      #    hdiutil attach ./appium-tests/apps/Uplink.dmg
      #    cp -r /Volumes/Uplink.dmg /Applications/
      #    hdiutil detach ./appium-tests/apps/Uplink.dmg

      - name: Install and Run Appium Server üì±
        run: |
          chmod +x ./appium-tests/scripts/run_appium_android_server.sh
          ./appium-tests/scripts/run_appium_macos_server.sh

      - name: Run WebdriverIO tests on MacOS
        run: npm run mac.ci

      - name: Upload Screenshots if tests failed üì∑
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appium-screenshots
          path: appium-tests/test-results/ios

      - name: Upload Appium Log if tests failed üì∑
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appium-log
          path: appium-tests/appium.log
